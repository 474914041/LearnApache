/* 
**  mod_basefun.c -- Apache sample basefun module
**  [Autogenerated via ``apxs -n basefun -g'']
**
**  To play with this sample module first compile it into a
**  DSO file and install it into Apache's modules directory 
**  by running:
**
**    $ apxs -c -i mod_basefun.c
**
**  Then activate it in Apache's httpd.conf file for instance
**  for the URL /basefun in as follows:
**
**    #   httpd.conf
**    LoadModule basefun_module modules/mod_basefun.so
**    <Location /basefun>
**    SetHandler basefun
**    </Location>
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /basefun and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/basefun 
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**  
**    The sample page from mod_basefun.c
*/ 

/*
我在apache中的配置如下：
LoadModule basefun_module modules/mod_basefun.so
AddHandler basefun .sum

http://shineforyou.club/basefun.sum?digest=789456
就可以访问到模块了
*/

#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"
#include "util_script.h"
#include "apr_strings.h"
#include "apr_md5.h"
#include "apr_sha1.h"
#include "common.h"
#include <unordered_map>

using namespace std;
static const char s_szCaseFilterName[] = "CaseFilter";

extern unordered_map<string, CSP_HANDLER> service;


/* The sample content handler */
static int basefun_handler(request_rec *r)
{
    /* First off, we need to check if this is a call for the "example-handler" handler.
     * If it is, we accept it and do our things, if not, we simply return DECLINED,
     * and the server will try somewhere else.
     */
    if (!r->handler || strcmp(r->handler, "basefun")) return (DECLINED);
    
    /* Now that we are handling this request, we'll write out "Hello, world!" to the client.
     * To do so, we must first set the appropriate content type, followed by our output.
     */
    ap_set_content_type(r, "text/html");
    //ap_rprintf(r, "Hello, world!");

	/* Print out the IP address of the client connecting to us: */
    ap_rprintf(r, "<h2>Hello, %s!</h2>", r->useragent_ip);
    
    /* If we were reached through a GET or a POST request, be happy, else sad. */
    if ( !strcmp(r->method, "POST") || !strcmp(r->method, "GET") ) {
        ap_rputs("You used a GET or a POST method, that makes us happy!", r);
    }
    else {
        ap_rputs("You did not use POST or GET, that makes us sad :(", r);
    }

    /* Lastly, if there was a query string, let's print that too! */
    if (r->args) {
        ap_rprintf(r, "Your query string was: %s", r->args);
    }

	apr_table_t *GET;
	ap_args_to_table(r, &GET);

	apr_array_header_t *POST;
	ap_parse_form_data(r, NULL, &POST, -1, 8192);

	const char * digestType = apr_table_get(GET, "digest");
	if (digestType) {
		ap_rprintf(r, "<p>您输入的digest的值是:%s!</p>", digestType);
	}

	if (r->handler) {
		ap_rprintf(r, "<p>此次请求的handler是:%s!</p>", r->handler);
	}

	if (r->filename) {
		ap_rprintf(r, "<p>此次请求的filename是:%s!</p>", r->filename);
	}
	/*
	请求链接是：http://shineforyou.club/basefun.sum?digest=789456
	输出的信息：
	Hello, 175.6.23.10!
	You used a GET or a POST method, that makes us happy!Your query string was: digest=789456
	您输入的digest的值是:789456!
	此次请求的handler是:basefun!
	此次请求的filename是:/var/www/blog/basefun.sum!

	(添加模块的方式如上)
	如果把第一行strcmp(r->handler, "basefun")关掉
	http://shineforyou.club/basefunnnn.sum?digest=789456
	此次请求的handler是:basefun!

	http://shineforyou.club/basefunnnn?digest=789456
	此次请求的handler是:!							(空)
	*/


	int rc, exists;
	apr_finfo_t finfo;
	apr_file_t *file;
	char *filename;
	char buffer[256] = {0};
	apr_size_t readBytes;
	int n;

	/* Figure out which file is being requested by removing the .sum from it */
	filename = apr_pstrdup(r->pool, r->filename);
	filename[strlen(filename) - 4] = '\0';	/* Cut off the last 4 characters. */

	
	/* Figure out if the file we request a sum on exists and isn't a directory */
	rc = apr_stat(&finfo, filename, APR_FINFO_MIN, r->pool);
	if (rc == APR_SUCCESS) {
		exists = (finfo.filetype != APR_NOFILE && !(finfo.filetype & APR_DIR));
		if (!exists) {
			ap_rprintf(r, "<p>此次请求的文件: %s 无访问权限</p>", filename);
			return OK;
		}
	} else {
		ap_rprintf(r, "<p>此次请求的文件: %s 不存在</p>", filename);	
		return OK;
	}

	if (!digestType) digestType = "MD5";

	rc = apr_file_open(&file, filename, APR_READ, APR_OS_DEFAULT, r->pool);
    if (rc == APR_SUCCESS) {
		/* Are we trying to calculate the MD5 or the SHA1 digest? */
		if (!strcasecmp(digestType, "md5")) {
			/* Calculate the MD5 sum of the file */
			union {
				unsigned char	  chr[16];
				uint32_t  num[4];
			} digest;
			apr_md5_ctx_t md5;
			apr_md5_init(&md5);
			readBytes = 256;
			while ( apr_file_read(file, buffer, &readBytes) == APR_SUCCESS ) {
				apr_md5_update(&md5, buffer, readBytes);
			}
			apr_md5_final(digest.chr, &md5);
			
			/* Print out the MD5 digest */
			ap_rputs("<b>MD5: </b><code>", r);
			for (n = 0; n < APR_MD5_DIGESTSIZE/4; n++) {
				ap_rprintf(r, "%08x", digest.num[n]);
			}
			ap_rputs("</code>", r);
			/* Print a link to the SHA1 version */
			ap_rputs("<a href='?digest=sha1'>View the SHA1 hash instead</a>", r);
		}
		else {
			/* Calculate the SHA1 sum of the file */
			union {
				unsigned char	  chr[20];
				uint32_t  num[5];
			} digest;
			apr_sha1_ctx_t sha1;
			apr_sha1_init(&sha1);
			readBytes = 256;
			while ( apr_file_read(file, buffer, &readBytes) == APR_SUCCESS ) {
				apr_sha1_update(&sha1, buffer, readBytes);
			}
			apr_sha1_final(digest.chr, &sha1);
			
			/* Print out the SHA1 digest */
			ap_rputs("<b>SHA1: </b><code>", r);
			for (n = 0; n < APR_SHA1_DIGESTSIZE/4; n++) {
				ap_rprintf(r, "%08x", digest.num[n]);
			}
			ap_rputs("</code>", r);
			
			/* Print a link to the MD5 version */
			ap_rputs("<a href='?digest=md5'>View the MD5 hash instead</a>", r);
		}
		apr_file_close(file);
			
	}
	const char *bigout = apr_table_get(GET, "bigout");
	if (bigout && !strcasecmp(bigout, "on")) {
    	ap_add_output_filter(s_szCaseFilterName, NULL, r, r->connection);
	}

	ap_rprintf(r, "<p>此次已经注册完了转大写的filter</p>");
    /* Lastly, we must tell the server that we took care of this request and everything went fine.
     * We do so by simply returning the value OK to the server.
     */
    return OK;
}

static int servercsp_handler(request_rec *r)
{
    /* First off, we need to check if this is a call for the "example-handler" handler.
     * If it is, we accept it and do our things, if not, we simply return DECLINED,
     * and the server will try somewhere else.
     */
    if (!r->handler || strcmp(r->handler, "servercsp")) return (DECLINED);
    
    /* Now that we are handling this request, we'll write out "Hello, world!" to the client.
     * To do so, we must first set the appropriate content type, followed by our output.
     */
    ap_set_content_type(r, "text/html");

	auto it = service.find("path");
	if (it != service.end()) {
	    it->second(r);
	} else {
	    ap_rputs("There is no service for you.Fuck out", r);
	}

	return OK;
}


static void basefun_register_hooks(apr_pool_t *p)
{
	ap_hook_handler(servercsp_handler, NULL, NULL, APR_HOOK_MIDDLE);
    ap_hook_handler(basefun_handler, NULL, NULL, APR_HOOK_LAST);
}

/* Dispatch list for API hooks */
module AP_MODULE_DECLARE_DATA basefun_module = {
    STANDARD20_MODULE_STUFF, 
    NULL,                  /* create per-dir    config structures */
    NULL,                  /* merge  per-dir    config structures */
    NULL,                  /* create per-server config structures */
    NULL,                  /* merge  per-server config structures */
    NULL,                  /* table of config file commands       */
    basefun_register_hooks  /* register hooks                      */
};

